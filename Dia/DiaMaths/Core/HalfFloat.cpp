
#include "DiaMaths/Core/HalfFloat.h"

#include "DiaMaths/Core/MathsDefines.h"

namespace Dia
{
	namespace Maths
	{
		const unsigned short HalfFloat::lookupTable[1 << 9] =
		{
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,  1024,  2048,  3072,  4096,  5120,  6144,  7168, 
			8192,  9216, 10240, 11264, 12288, 13312, 14336, 15360, 
			16384, 17408, 18432, 19456, 20480, 21504, 22528, 23552, 
			24576, 25600, 26624, 27648, 28672, 29696,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0, 33792, 34816, 35840, 36864, 37888, 38912, 39936, 
			40960, 41984, 43008, 44032, 45056, 46080, 47104, 48128, 
			49152, 50176, 51200, 52224, 53248, 54272, 55296, 56320, 
			57344, 58368, 59392, 60416, 61440, 62464,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
			0,     0,     0,     0,     0,     0,     0,     0, 
		};


		float HalfFloat::ToFloat() const
		{
			unsigned short y = mHalfFloat;
			uif fl;
			int s = (y >> 15) & 0x00000001;
			int e = (y >> 10) & 0x0000001f;
			int m =  y        & 0x000003ff;

			if (e == 0)
			{
				if (m == 0)
				{
					fl.i = s << 31;
					return fl.f;
				}
				else
				{
					while (!(m & 0x00000400))
					{
						m <<= 1;
						e -=  1;
					}

					e += 1;
					m &= ~0x00000400;
				}
			}
			else if (e == 31)
			{
				if (m == 0)
				{
					fl.i = (s << 31) | 0x7f800000;
					return fl.f;
				}
				else
				{
					fl.i = (s << 31) | 0x7f800000 | (m << 13);
					return fl.f;
				}
			}

			e = e + (127 - 15);
			m = m << 13;

			fl.i = (s << 31) | (e << 23) | m;
			return fl.f;
		}

		//-------------------------------------------------------------------
		float HalfFloat::Overflow()
		{
			float f = 1e10;

			for (int i = 0; i < 10; i++)	
			{
				f *= f;		
			}

			return f;
		}
	
		//-------------------------------------------------------------------
		short HalfFloat::Convert( int i )
		{
			register int s =  (i >> 16) & 0x00008000;
			register int e = ((i >> 23) & 0x000000ff) - (127 - 15);
			register int m =   i        & 0x007fffff;

			if (e <= 0)
			{
				if (e < -10)
				{
					return 0;
				}

				m = (m | 0x00800000) >> (1 - e);

				if (m &  0x00001000)
				{
					m += 0x00002000;
				}

				return s | (m >> 13);
			}
			else if (e == 0xff - (127 - 15))
			{
				if (m == 0)
				{
					return s | 0x7c00;
				}
				else
				{
					m >>= 13;
					return s | 0x7c00 | m | (m == 0);
				}
			}
			else
			{
				if (m &  0x00001000)
				{
					m += 0x00002000;

					if (m & 0x00800000)
					{
						m =  0;		// overflow in significand,
						e += 1;		// adjust exponent
					}
				}


				if (e > 30)
				{
					Overflow ();	// Cause a hardware floating point overflow;
					return s | 0x7c00;	// if this returns, the HalfFloat becomes an
				}   			// infinity with the same sign as f.

				return s | (e << 10) | (m >> 13);
			}
		}

		// -----------------------------------------------------------------------------
		HalfFloat HalfFloat::Round( unsigned int n ) const
		{
			if( n >= 10 )
			{
				return *this;
			}

			unsigned short s = mHalfFloat & 0x8000;
			unsigned short e = mHalfFloat & 0x7fff;

			e >>= 9 - n;
			e  += e & 1;
			e <<= 9 - n;

			if (e >= 0x7c00)
			{
				e = mHalfFloat;
				e >>= 10 - n;
				e <<= 10 - n;
			}

			HalfFloat h;
			h.mHalfFloat = s | e;

			return h;
		}

		// -----------------------------------------------------------------------------
		HalfFloat HalfFloat::Epsilon()
		{
			static HalfFloat epsilon(Dia::Maths::FLOAT_EPSILON);

			return epsilon;
		}
	}
}